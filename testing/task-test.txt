{{ range $index, $data := .BdngData }}
    {{ range $num, $info := $data.Rooms }}
        <input id="{{ $data.Abrv }}{{ $num }}" type="submit" value="{{ $data.Abrv }}{{ $num }}" onclick="rbtn(this)"></input>
    {{ end }}
{{ end }}



----------------------------------------------------------------------------------

{{ range $index, $data := .BdngData }}
    {{ range $num, $info := $data.Rooms }}
        if ({{ $info.Group }} == {{ .UserData.Group }}) {
            var btn = document.createElement("input");
            btn.type = "submit";
            btn.value = "{{ $data.Abrv }}{{ $num }}";
            var elem = document.getElementById("content");
            elem.appendChild(btn);
        }
    {{ end }}
{{ end }}

// var para = document.createElement("p");
// var node = document.createTextNode("This is new.");
// para.appendChild(node);
//
// var element = document.getElementById("div1");
// element.appendChild(para);


---------------------------------------------------------------------------------

<div id="rbtns">
    <input id="roomselect" type="text" placeholder="Select A Room" readonly></input>
    {{ range $index, $data := .BdngData }}
        {{ range $num, $info := $data.Rooms }}
            <input id="{{ $data.Abrv }}{{ $num }}" type="submit" value="{{ $data.Abrv }}{{ $num }}" onclick="rbtn(this)"></input>
        {{ end }}
    {{ end }}
</div>

-------------------------------------------------------------------------

if lamph == "" {
    disperr(w, "Please enter lamphours for the room!", "/task")
}
if room.Lamph.Interactive != -1 {
    s := strings.Split(lamph, ",")
    if len(s) == 1 {
        disperr(w, "Please enter lamphours for the interactive projector as well!", "/task")
    } else {
        building.Rooms[roomnum].Lamph.Standard, _ = strconv.Atoi(s[0])
        building.Rooms[roomnum].Lamph.Interactive, _ = strconv.Atoi(s[0])
    }
} else {
    building.Rooms[roomnum].Lamph.Standard, _ = strconv.Atoi(lamph)
}

if problist != "" {
    s := strings.Split(problist, ",")
    building.Rooms[roomnum].Probcat = make([]int, len(s))
    for i := 0; i < len(s); i++ {
        problem, _ := strconv.Atoi(s[i])
        building.Rooms[roomnum].Probcat = append(building.Rooms[roomnum].Probcat, problem)
    }
}
